(define-syntax do!
  (syntax-rules ()
    ((_ form ...) ((fn () form ...)))))

(define-syntax do
  (syntax-rules ()
    ((_ form) form)
    ((_ form ...) (do! form ...))))

(define-syntax let
  (syntax-rules ()
    ((_ ((id val) ...) body bodies ...) ((fn (id ...) body bodies ...) val ...))))
    
(define-syntax cond
  (syntax-rules (else)
    ((_ (test-expr then-expr ...) (else else-expr ...)) (if test-expr (do then-expr ...) (do else-expr ...)))
    ((_ (test-expr then-expr ...) exprs ...) (if test-expr (do then-expr ...) (cond exprs ...)))))
    
(define-syntax case
  (syntax-rules (else)
    ((case (key ...)
       clauses ...)
     (let ((atom-key (key ...)))
       (case atom-key clauses ...)))
    ((case key
       (else result1 result2 ...))
     (do result1 result2 ...))         
    ((case key
       ((atom) result1 result2 ...)
       clause clauses ...)
     (if (== atom key)
         (do result1 result2 ...)
         (case key clause clauses ...)))
    ((case key
       ((atoms ...) result1 result2 ...)
       clause clauses ...)
     (if (> (.indexOf '(atoms ...) key) (- 1))
         (do result1 result2 ...)
         (case key clause clauses ...)))))

(define-syntax and
  (syntax-rules ()
    ((_ expr1 expr2) (if expr1 (if expr2 #t #f) #f))
    ((_ expr1 exprs ...) (if expr1 (if (and exprs ...) #t #f) #f))))

(define-syntax or
  (syntax-rules ()
    ((_ expr1 expr2) (if expr1 #t (if expr2 #t #f)))
    ((_ expr1 exprs ...) (if expr1 #t (if (or exprs ...) #t #f)))))